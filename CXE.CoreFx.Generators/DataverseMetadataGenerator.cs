// <auto-generated>
// Dataverse Metadata Source Generator
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CXE.CoreFx.Generators
{
	[Generator]
	public sealed class DataverseMetadataGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
#if DEBUG && false
            if (!System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();
#endif
			var classDeclarations = context.SyntaxProvider.CreateSyntaxProvider(
				predicate: static (s, _) => s is ClassDeclarationSyntax cds && cds.AttributeLists.Count > 0,
				transform: static (ctx, _) =>
				{
					var cds = (ClassDeclarationSyntax) ctx.Node;
					var symbol = ctx.SemanticModel.GetDeclaredSymbol(cds) as INamedTypeSymbol;
					if (symbol == null)
						return null;
					if (!symbol.GetAttributes().Any(a => a.AttributeClass?.Name is "DataverseTableAttribute" or "DataverseTable"))
						return null;
					return symbol;
				})
				.Where(static s => s != null);

			context.RegisterSourceOutput(classDeclarations, static (spc, symbolObj) =>
			{
				var symbol = (INamedTypeSymbol) symbolObj!;
				try
				{
					GenerateFor(spc, symbol);
				}
				catch (Exception ex)
				{
					var desc = new DiagnosticDescriptor("DVGEN001", "Generation error", "Error generating metadata for {0}: {1}", "DataverseGen", DiagnosticSeverity.Warning, true);
					spc.ReportDiagnostic(Diagnostic.Create(desc, Location.None, symbol.ToDisplayString(), ex.Message));
				}
			});
		}

		private static void GenerateFor(SourceProductionContext context, INamedTypeSymbol typeSymbol)
		{
			var tableAttr = typeSymbol.GetAttributes().FirstOrDefault(a => a.AttributeClass?.Name is "DataverseTableAttribute" or "DataverseTable");
			if (tableAttr == null)
				return;
			var tableName = tableAttr.ConstructorArguments.FirstOrDefault().Value as string;
			if (string.IsNullOrWhiteSpace(tableName))
				return;

			var properties = typeSymbol.GetMembers().OfType<IPropertySymbol>()
				.Select(p => new { Prop = p, Attr = p.GetAttributes().FirstOrDefault(a => a.AttributeClass?.Name is "DataverseColumnAttribute" or "DataverseColumn") })
				.Where(x => x.Attr != null)
				.Select(x => new
				{
					x.Prop.Name,
					Logical = x.Attr!.ConstructorArguments.Length > 0 ? x.Attr.ConstructorArguments[0].Value as string : null,
					IsReference = x.Attr.NamedArguments.FirstOrDefault(na => na.Key == "IsReference").Value.Value as bool? ?? false
				})
				.Where(x => !string.IsNullOrWhiteSpace(x.Logical))
				.ToList();

			if (properties.Count == 0)
				return;

			var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace ? null : typeSymbol.ContainingNamespace.ToDisplayString();
			var sb = new StringBuilder();
			sb.AppendLine("// <auto-generated />");
			sb.AppendLine("#nullable enable");
			if (ns != null)
			{
				sb.Append("namespace ").Append(ns).AppendLine();
				sb.AppendLine("{");
			}
			sb.Append("partial class ").Append(typeSymbol.Name).AppendLine();
			sb.AppendLine("{");
			sb.Append("    public const string TableLogicalName = \"").Append(tableName).AppendLine("\";");
			sb.AppendLine("    public static class Columns");
			sb.AppendLine("    {");
			foreach (var p in properties.OrderBy(p => p.Name))
			{
				var logical = p.IsReference ? $"_{p.Logical?.ToLowerInvariant()}_value" : (p.Logical ?? "");
				sb.Append("        public const string ").Append(p.Name).Append(" = \"").Append(logical).AppendLine("\";");
			}
			sb.AppendLine("    }");
			sb.AppendLine();
			sb.AppendLine("    public static readonly string[] AllColumns = new string[] {");
			foreach (var p in properties.OrderBy(p => p.Name))
			{
				sb.Append("        Columns.").Append(p.Name).AppendLine(",");
			}
			sb.AppendLine("    };");
			sb.AppendLine("}");
			if (ns != null)
				sb.AppendLine("}");

			var hintName = typeSymbol.ToDisplayString().Replace('.', '_') + "_DataverseMeta.g.cs";
			context.AddSource(hintName, sb.ToString());
		}
	}
}
